// Firestore Security Rules for Real-Time Collaborative Editing
// Add these rules to your existing firestore.rules file

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Document Locks Collection
    match /document_locks/{lockId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow create/update only if:
      // 1. User is authenticated
      // 2. User is setting themselves as the lock owner
      // 3. Lock doesn't exist or is expired or owned by the same user
      allow create, update: if request.auth != null 
        && request.auth.uid == resource.data.userId
        && (
          !exists(/databases/$(database)/documents/document_locks/$(lockId))
          || resource.data.expiresAt < request.time
          || resource.data.userId == request.auth.uid
        );
      
      // Allow delete only if user owns the lock
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
    
    // User Presence Collection
    match /user_presence/{presenceId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow create/update only if user is setting their own presence
      allow create, update: if request.auth != null 
        && request.auth.uid == resource.data.userId;
      
      // Allow delete only if user is removing their own presence
      allow delete: if request.auth != null 
        && request.auth.uid == resource.data.userId;
    }
    
    // Enhanced Projects Collection Rules for Collaboration
    match /projects/{projectId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow create for authenticated users
      allow create: if request.auth != null;
      
      // Allow update if:
      // 1. User is authenticated
      // 2. User has appropriate role permissions
      // 3. Document is not locked by another user (checked via function)
      allow update: if request.auth != null 
        && hasValidRole(request.auth.token)
        && canEditDocument(projectId, 'project', request.auth.uid);
      
      // Allow delete for admin users only
      allow delete: if request.auth != null 
        && request.auth.token.role == 'admin';
    }
    
    // Enhanced Milestones Collection Rules for Collaboration
    match /milestones/{milestoneId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow create for authenticated users
      allow create: if request.auth != null;
      
      // Allow update if user can edit and document is not locked
      allow update: if request.auth != null 
        && hasValidRole(request.auth.token)
        && canEditDocument(milestoneId, 'milestone', request.auth.uid);
      
      // Allow delete for appropriate roles
      allow delete: if request.auth != null 
        && (request.auth.token.role == 'admin' 
            || request.auth.token.role == 'production');
    }
    
    // Sync Queue Collection (for offline-first architecture)
    match /sync_queue/{userId}/actions/{actionId} {
      // Users can only access their own sync queue
      allow read, write: if request.auth != null 
        && request.auth.uid == userId;
    }
    
    // Conflict Resolution Collection
    match /conflicts/{conflictId} {
      // Allow read access to all authenticated users
      allow read: if request.auth != null;
      
      // Allow create for authenticated users
      allow create: if request.auth != null;
      
      // Allow update/delete for admin users or conflict participants
      allow update, delete: if request.auth != null 
        && (request.auth.token.role == 'admin' 
            || request.auth.uid in resource.data.involvedUsers);
    }
    
    // Helper Functions
    function hasValidRole(token) {
      return token.role in ['admin', 'sales', 'designer', 'production', 'installation'];
    }
    
    function canEditDocument(documentId, documentType, userId) {
      // Check if document is locked by another user
      let lockPath = /databases/$(database)/documents/document_locks/$(documentType + '_' + documentId);
      return !exists(lockPath) 
        || get(lockPath).data.userId == userId 
        || get(lockPath).data.expiresAt < request.time;
    }
    
    function isDocumentOwner(documentData, userId) {
      return documentData.createdBy == userId 
        || documentData.assignedTo == userId;
    }
    
    function hasModulePermission(userRole, module, action) {
      // Define role-based permissions for each module
      return (
        // Admin can do everything
        (userRole == 'admin') ||
        
        // Sales module permissions
        (module == 'sales' && userRole == 'sales' && action in ['read', 'create', 'update']) ||
        
        // Design module permissions
        (module == 'design' && userRole == 'designer' && action in ['read', 'create', 'update']) ||
        
        // Production module permissions
        (module == 'production' && userRole == 'production' && action in ['read', 'create', 'update']) ||
        
        // Installation module permissions
        (module == 'installation' && userRole == 'installation' && action in ['read', 'create', 'update']) ||
        
        // Read-only access for other roles
        (action == 'read')
      );
    }
  }
}

// Additional Index Requirements for Optimal Performance
// Add these to your Firestore indexes:

/*
Collection: document_locks
Fields: documentId (Ascending), documentType (Ascending), expiresAt (Ascending)

Collection: user_presence  
Fields: documentId (Ascending), documentType (Ascending), lastSeen (Ascending)

Collection: user_presence
Fields: userId (Ascending), isOnline (Ascending), lastSeen (Descending)

Collection: projects
Fields: status (Ascending), createdAt (Descending)

Collection: milestones
Fields: projectId (Ascending), status (Ascending), startDate (Ascending)

Collection: sync_queue
Fields: userId (Ascending), timestamp (Ascending), status (Ascending)

Collection: conflicts
Fields: documentId (Ascending), documentType (Ascending), status (Ascending), createdAt (Descending)
*/

// Security Best Practices Implemented:
// 1. All operations require authentication
// 2. Users can only modify their own locks and presence
// 3. Document locks prevent concurrent editing
// 4. Role-based access control for different modules
// 5. Automatic lock expiration prevents deadlocks
// 6. Conflict detection and resolution support
// 7. Integration with offline-first sync architecture
