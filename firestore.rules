rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isAdmin() {
      return isAuthenticated() && getUserRole() == 'admin';
    }
    
    function isSales() {
      return isAuthenticated() && getUserRole() == 'sales';
    }
    
    function isDesigner() {
      return isAuthenticated() && getUserRole() == 'designer';
    }
    
    function isProduction() {
      return isAuthenticated() && getUserRole() == 'production';
    }
    
    function isInstallation() {
      return isAuthenticated() && getUserRole() == 'installation';
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function canViewAmounts() {
      return isAdmin() || isSales();
    }
    
    // Users collection - Admin can manage all users, users can read their own profile
    match /users/{userId} {
      allow read: if isAuthenticated() && (isAdmin() || isOwner(userId));

      // Allow user creation by admin or during registration (when creating own document)
      allow create: if isAuthenticated() && (
        isAdmin() ||
        (request.auth.uid == userId && validateUserCreation())
      );

      // Allow updates by admin or user updating their own profile (but not role)
      allow update: if isAuthenticated() && (
        isAdmin() ||
        (isOwner(userId) && !('role' in request.resource.data.diff(resource.data).affectedKeys()))
      );

      allow delete: if isAdmin();
    }

    // User creation validation
    function validateUserCreation() {
      let data = request.resource.data;
      return (
        // Required fields for user creation
        data.keys().hasAll(['uid', 'name', 'email', 'role']) &&

        // UID must match the document ID and authenticated user
        data.uid == request.auth.uid &&

        // Valid role values
        data.role in ['admin', 'sales', 'designer', 'production', 'installation'] &&

        // Name and email must be strings
        data.name is string && data.name.size() > 0 &&
        data.email is string && data.email.size() > 0
      );
    }
    
    // Projects collection - Complex role-based access control
    match /projects/{projectId} {
      // Read permissions
      allow read: if isAuthenticated();
      
      // Create permissions - Only Admin and Sales can create projects
      allow create: if (isAdmin() || isSales()) && validateProjectData();
      
      // Update permissions based on project status and user role
      allow update: if isAuthenticated() && (
        // Admin can update everything
        isAdmin() ||

        // Sales can update their own projects if status is sales or dne
        (isSales() && resource.data.createdBy == request.auth.uid && resource.data.status in ['sales', 'dne']) ||

        // Designer can update dne projects to production, installation, or completed
        (isDesigner() && resource.data.status == 'dne' &&
         request.resource.data.status in ['production', 'installation', 'completed']) ||

        // Production can update production projects to installation or completed
        (isProduction() && resource.data.status == 'production' &&
         request.resource.data.status in ['installation', 'completed']) ||

        // Installation can update installation projects to completed
        (isInstallation() && resource.data.status == 'installation' &&
         request.resource.data.status == 'completed')
      ) && validateProjectData();

      // Delete permissions - Only Admin and project creator (if Sales)
      allow delete: if isAdmin() || (isSales() && resource.data.createdBy == request.auth.uid);
    }
    
    // Project validation function
    function validateProjectData() {
      let data = request.resource.data;
      return (
        // Required fields - Updated to match actual project structure
        data.keys().hasAll(['name', 'deliveryDate', 'status', 'createdBy']) &&

        // Valid status values - Updated to match actual status values
        data.status in ['sales', 'dne', 'production', 'installation', 'completed'] &&

        // Name must be string and not empty
        data.name is string && data.name.size() > 0 &&

        // Amount validation (if present)
        (!('amount' in data) || (data.amount is number && data.amount >= 0)) &&

        // CreatedBy must match authenticated user (for new documents)
        (resource == null || data.createdBy == resource.data.createdBy) &&

        // Status transition validation
        validateStatusTransition()
      );
    }
    
    // Status transition validation
    function validateStatusTransition() {
      let oldStatus = resource != null ? resource.data.status : null;
      let newStatus = request.resource.data.status;

      return (
        // New documents can start with sales
        (resource == null && newStatus == 'sales') ||

        // Valid transitions - Updated to match actual status flow
        (oldStatus == 'sales' && newStatus in ['dne', 'completed']) ||
        (oldStatus == 'dne' && newStatus in ['production', 'installation', 'completed']) ||
        (oldStatus == 'production' && newStatus in ['installation', 'completed']) ||
        (oldStatus == 'installation' && newStatus == 'completed') ||

        // Admin can make any transition
        isAdmin()
      );
    }
    
    // Complaints collection
    match /complaints/{complaintId} {
      // Anyone can read complaints
      allow read: if isAuthenticated();
      
      // Anyone can create complaints
      allow create: if isAuthenticated() && validateComplaintData();
      
      // Only Admin and complaint creator can update
      allow update: if isAuthenticated() && (
        isAdmin() || 
        resource.data.createdBy == request.auth.uid
      ) && validateComplaintData();
      
      // Only Admin can delete complaints
      allow delete: if isAdmin();
    }
    
    // Complaint validation function
    function validateComplaintData() {
      let data = request.resource.data;
      return (
        // Required fields
        data.keys().hasAll(['title', 'description', 'customerName', 'projectId', 'status', 'priority', 'createdBy']) &&
        
        // Valid status and priority values
        data.status in ['open', 'in-progress', 'resolved'] &&
        data.priority in ['high', 'medium', 'low'] &&
        
        // String fields validation
        data.title is string && data.title.size() > 0 &&
        data.description is string && data.description.size() > 0 &&
        data.customerName is string && data.customerName.size() > 0 &&
        
        // CreatedBy must match authenticated user (for new documents)
        (resource == null || data.createdBy == resource.data.createdBy)
      );
    }
    
    // Milestones collection
    match /milestones/{milestoneId} {
      // Read permissions - anyone can read
      allow read: if isAuthenticated();
      
      // Create permissions - Admin, Production, and Designer can create milestones
      // Designer can create milestones when transitioning projects from DNE
      allow create: if isAuthenticated() && (isAdmin() || isProduction() || isDesigner()) && validateMilestoneData();
      
      // Update permissions
      allow update: if isAuthenticated() && (
        // Admin can update everything
        isAdmin() ||
        
        // Production can update milestones
        isProduction() ||
        
        // Installation can update milestone status
        (isInstallation() && onlyStatusChanged())
      ) && validateMilestoneData();
      
      // Delete permissions - Only Admin and Production
      allow delete: if isAdmin() || isProduction();
    }
    
    // Check if only status field is being changed
    function onlyStatusChanged() {
      let changedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return changedKeys.hasOnly(['status', 'completedDate', 'updatedAt']);
    }
    
    // Milestone validation function
    function validateMilestoneData() {
      let data = request.resource.data;
      return (
        // Required fields - accept either startDate or dueDate
        data.keys().hasAll(['projectId', 'title', 'status']) &&
        (data.keys().hasAny(['startDate', 'dueDate'])) &&

        // Valid status values
        data.status in ['pending', 'in-progress', 'completed'] &&

        // String fields validation
        data.title is string && data.title.size() > 0 &&
        data.projectId is string && data.projectId.size() > 0
      );
    }
    
    // Statistics collection (read-only for most users)
    match /statistics/{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // System logs (Admin only)
    match /logs/{document=**} {
      allow read, write: if isAdmin();
    }

    // Document locks collection for collaborative editing
    match /document_locks/{lockId} {
      // Anyone authenticated can read locks to check status
      allow read: if isAuthenticated();

      // Anyone authenticated can create/update locks for their own documents
      allow create, update: if isAuthenticated() && (
        // User can create/update their own locks
        request.resource.data.userId == request.auth.uid ||
        // Admin can manage any lock
        isAdmin()
      );

      // Users can delete their own locks, admin can delete any
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // User presence collection for collaborative editing
    match /user_presence/{presenceId} {
      // Anyone authenticated can read presence to see who's online
      allow read: if isAuthenticated();

      // Users can create/update their own presence
      allow create, update: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        isAdmin()
      );

      // Users can delete their own presence, admin can delete any
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Sync queue collection for offline functionality
    match /sync_queue/{queueId} {
      // Users can read their own sync queue items
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );

      // Users can create/update their own sync queue items
      allow create, update: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        isAdmin()
      );

      // Users can delete their own sync queue items
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Conflicts collection for sync conflict resolution
    match /conflicts/{conflictId} {
      // Users can read conflicts related to their documents
      allow read: if isAuthenticated();

      // System and admin can create/update conflicts
      allow create, update: if isAuthenticated() && (
        request.resource.data.userId == request.auth.uid ||
        isAdmin()
      );

      // Users can delete their own conflicts, admin can delete any
      allow delete: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
